// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGUPLINK_CALSTAR_H_
#define FLATBUFFERS_GENERATED_MSGUPLINK_CALSTAR_H_

#include "flatbuffers/flatbuffers.h"

namespace Calstar {

struct UplinkMsg;

enum UplinkType {
  UplinkType_FCOn = 0,
  UplinkType_FCOff = 1,
  UplinkType_BlackPowderPulse = 3,
  UplinkType_Ack = 4,
  UplinkType_MIN = UplinkType_FCOn,
  UplinkType_MAX = UplinkType_Ack
};

inline const UplinkType (&EnumValuesUplinkType())[4] {
  static const UplinkType values[] = {
    UplinkType_FCOn,
    UplinkType_FCOff,
    UplinkType_BlackPowderPulse,
    UplinkType_Ack
  };
  return values;
}

inline const char * const *EnumNamesUplinkType() {
  static const char * const names[] = {
    "FCOn",
    "FCOff",
    "",
    "BlackPowderPulse",
    "Ack",
    nullptr
  };
  return names;
}

inline const char *EnumNameUplinkType(UplinkType e) {
  if (e < UplinkType_FCOn || e > UplinkType_Ack) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesUplinkType()[index];
}

struct UplinkMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BYTES = 4,
    VT_TYPE = 6,
    VT_BP = 8,
    VT_FRAMEID = 10,
    VT_ACKREQD = 12
  };
  uint8_t Bytes() const {
    return GetField<uint8_t>(VT_BYTES, 0);
  }
  UplinkType Type() const {
    return static_cast<UplinkType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<uint8_t> *BP() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BP);
  }
  uint8_t FrameID() const {
    return GetField<uint8_t>(VT_FRAMEID, 0);
  }
  bool AckReqd() const {
    return GetField<uint8_t>(VT_ACKREQD, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BYTES) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_BP) &&
           verifier.VerifyVector(BP()) &&
           VerifyField<uint8_t>(verifier, VT_FRAMEID) &&
           VerifyField<uint8_t>(verifier, VT_ACKREQD) &&
           verifier.EndTable();
  }
};

struct UplinkMsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Bytes(uint8_t Bytes) {
    fbb_.AddElement<uint8_t>(UplinkMsg::VT_BYTES, Bytes, 0);
  }
  void add_Type(UplinkType Type) {
    fbb_.AddElement<int8_t>(UplinkMsg::VT_TYPE, static_cast<int8_t>(Type), 0);
  }
  void add_BP(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BP) {
    fbb_.AddOffset(UplinkMsg::VT_BP, BP);
  }
  void add_FrameID(uint8_t FrameID) {
    fbb_.AddElement<uint8_t>(UplinkMsg::VT_FRAMEID, FrameID, 0);
  }
  void add_AckReqd(bool AckReqd) {
    fbb_.AddElement<uint8_t>(UplinkMsg::VT_ACKREQD, static_cast<uint8_t>(AckReqd), 0);
  }
  explicit UplinkMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UplinkMsgBuilder &operator=(const UplinkMsgBuilder &);
  flatbuffers::Offset<UplinkMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UplinkMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<UplinkMsg> CreateUplinkMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t Bytes = 0,
    UplinkType Type = UplinkType_FCOn,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> BP = 0,
    uint8_t FrameID = 0,
    bool AckReqd = false) {
  UplinkMsgBuilder builder_(_fbb);
  builder_.add_BP(BP);
  builder_.add_AckReqd(AckReqd);
  builder_.add_FrameID(FrameID);
  builder_.add_Type(Type);
  builder_.add_Bytes(Bytes);
  return builder_.Finish();
}

inline flatbuffers::Offset<UplinkMsg> CreateUplinkMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t Bytes = 0,
    UplinkType Type = UplinkType_FCOn,
    const std::vector<uint8_t> *BP = nullptr,
    uint8_t FrameID = 0,
    bool AckReqd = false) {
  auto BP__ = BP ? _fbb.CreateVector<uint8_t>(*BP) : 0;
  return Calstar::CreateUplinkMsg(
      _fbb,
      Bytes,
      Type,
      BP__,
      FrameID,
      AckReqd);
}

inline const Calstar::UplinkMsg *GetUplinkMsg(const void *buf) {
  return flatbuffers::GetRoot<Calstar::UplinkMsg>(buf);
}

inline const Calstar::UplinkMsg *GetSizePrefixedUplinkMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Calstar::UplinkMsg>(buf);
}

inline bool VerifyUplinkMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calstar::UplinkMsg>(nullptr);
}

inline bool VerifySizePrefixedUplinkMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calstar::UplinkMsg>(nullptr);
}

inline void FinishUplinkMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::UplinkMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUplinkMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::UplinkMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calstar

#endif  // FLATBUFFERS_GENERATED_MSGUPLINK_CALSTAR_H_
