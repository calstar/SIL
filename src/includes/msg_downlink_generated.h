// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGDOWNLINK_CALSTAR_H_
#define FLATBUFFERS_GENERATED_MSGDOWNLINK_CALSTAR_H_

#include "flatbuffers/flatbuffers.h"

#include "msg_fc_update_generated.h"

namespace Calstar {

struct DownlinkMsg;

enum TPCState {
  TPCState_Pad = 0,
  TPCState_Flight = 1,
  TPCState_MIN = TPCState_Pad,
  TPCState_MAX = TPCState_Flight
};

inline const TPCState (&EnumValuesTPCState())[2] {
  static const TPCState values[] = {
    TPCState_Pad,
    TPCState_Flight
  };
  return values;
}

inline const char * const *EnumNamesTPCState() {
  static const char * const names[] = {
    "Pad",
    "Flight",
    nullptr
  };
  return names;
}

inline const char *EnumNameTPCState(TPCState e) {
  if (e < TPCState_Pad || e > TPCState_Flight) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesTPCState()[index];
}

enum DownlinkType {
  DownlinkType_StateUpdate = 0,
  DownlinkType_Ack = 1,
  DownlinkType_MIN = DownlinkType_StateUpdate,
  DownlinkType_MAX = DownlinkType_Ack
};

inline const DownlinkType (&EnumValuesDownlinkType())[2] {
  static const DownlinkType values[] = {
    DownlinkType_StateUpdate,
    DownlinkType_Ack
  };
  return values;
}

inline const char * const *EnumNamesDownlinkType() {
  static const char * const names[] = {
    "StateUpdate",
    "Ack",
    nullptr
  };
  return names;
}

inline const char *EnumNameDownlinkType(DownlinkType e) {
  if (e < DownlinkType_StateUpdate || e > DownlinkType_Ack) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesDownlinkType()[index];
}

struct DownlinkMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BYTES = 4,
    VT_STATE = 6,
    VT_FCPOWERED = 8,
    VT_FCMSG = 10,
    VT_GPSSTRING = 12,
    VT_BATTVOLTAGE = 14,
    VT_FRAMEID = 16,
    VT_ACKREQD = 18,
    VT_TIMESTAMP = 20,
    VT_TYPE = 22
  };
  uint8_t Bytes() const {
    return GetField<uint8_t>(VT_BYTES, 0);
  }
  TPCState State() const {
    return static_cast<TPCState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool FCPowered() const {
    return GetField<uint8_t>(VT_FCPOWERED, 0) != 0;
  }
  const FCUpdateMsg *FCMsg() const {
    return GetPointer<const FCUpdateMsg *>(VT_FCMSG);
  }
  const flatbuffers::String *GPSString() const {
    return GetPointer<const flatbuffers::String *>(VT_GPSSTRING);
  }
  uint16_t BattVoltage() const {
    return GetField<uint16_t>(VT_BATTVOLTAGE, 0);
  }
  uint8_t FrameID() const {
    return GetField<uint8_t>(VT_FRAMEID, 0);
  }
  bool AckReqd() const {
    return GetField<uint8_t>(VT_ACKREQD, 0) != 0;
  }
  uint64_t TimeStamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  DownlinkType Type() const {
    return static_cast<DownlinkType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BYTES) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<uint8_t>(verifier, VT_FCPOWERED) &&
           VerifyOffset(verifier, VT_FCMSG) &&
           verifier.VerifyTable(FCMsg()) &&
           VerifyOffset(verifier, VT_GPSSTRING) &&
           verifier.VerifyString(GPSString()) &&
           VerifyField<uint16_t>(verifier, VT_BATTVOLTAGE) &&
           VerifyField<uint8_t>(verifier, VT_FRAMEID) &&
           VerifyField<uint8_t>(verifier, VT_ACKREQD) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct DownlinkMsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Bytes(uint8_t Bytes) {
    fbb_.AddElement<uint8_t>(DownlinkMsg::VT_BYTES, Bytes, 0);
  }
  void add_State(TPCState State) {
    fbb_.AddElement<int8_t>(DownlinkMsg::VT_STATE, static_cast<int8_t>(State), 0);
  }
  void add_FCPowered(bool FCPowered) {
    fbb_.AddElement<uint8_t>(DownlinkMsg::VT_FCPOWERED, static_cast<uint8_t>(FCPowered), 0);
  }
  void add_FCMsg(flatbuffers::Offset<FCUpdateMsg> FCMsg) {
    fbb_.AddOffset(DownlinkMsg::VT_FCMSG, FCMsg);
  }
  void add_GPSString(flatbuffers::Offset<flatbuffers::String> GPSString) {
    fbb_.AddOffset(DownlinkMsg::VT_GPSSTRING, GPSString);
  }
  void add_BattVoltage(uint16_t BattVoltage) {
    fbb_.AddElement<uint16_t>(DownlinkMsg::VT_BATTVOLTAGE, BattVoltage, 0);
  }
  void add_FrameID(uint8_t FrameID) {
    fbb_.AddElement<uint8_t>(DownlinkMsg::VT_FRAMEID, FrameID, 0);
  }
  void add_AckReqd(bool AckReqd) {
    fbb_.AddElement<uint8_t>(DownlinkMsg::VT_ACKREQD, static_cast<uint8_t>(AckReqd), 0);
  }
  void add_TimeStamp(uint64_t TimeStamp) {
    fbb_.AddElement<uint64_t>(DownlinkMsg::VT_TIMESTAMP, TimeStamp, 0);
  }
  void add_Type(DownlinkType Type) {
    fbb_.AddElement<int8_t>(DownlinkMsg::VT_TYPE, static_cast<int8_t>(Type), 0);
  }
  explicit DownlinkMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DownlinkMsgBuilder &operator=(const DownlinkMsgBuilder &);
  flatbuffers::Offset<DownlinkMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownlinkMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownlinkMsg> CreateDownlinkMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t Bytes = 0,
    TPCState State = TPCState_Pad,
    bool FCPowered = false,
    flatbuffers::Offset<FCUpdateMsg> FCMsg = 0,
    flatbuffers::Offset<flatbuffers::String> GPSString = 0,
    uint16_t BattVoltage = 0,
    uint8_t FrameID = 0,
    bool AckReqd = false,
    uint64_t TimeStamp = 0,
    DownlinkType Type = DownlinkType_StateUpdate) {
  DownlinkMsgBuilder builder_(_fbb);
  builder_.add_TimeStamp(TimeStamp);
  builder_.add_GPSString(GPSString);
  builder_.add_FCMsg(FCMsg);
  builder_.add_BattVoltage(BattVoltage);
  builder_.add_Type(Type);
  builder_.add_AckReqd(AckReqd);
  builder_.add_FrameID(FrameID);
  builder_.add_FCPowered(FCPowered);
  builder_.add_State(State);
  builder_.add_Bytes(Bytes);
  return builder_.Finish();
}

inline flatbuffers::Offset<DownlinkMsg> CreateDownlinkMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t Bytes = 0,
    TPCState State = TPCState_Pad,
    bool FCPowered = false,
    flatbuffers::Offset<FCUpdateMsg> FCMsg = 0,
    const char *GPSString = nullptr,
    uint16_t BattVoltage = 0,
    uint8_t FrameID = 0,
    bool AckReqd = false,
    uint64_t TimeStamp = 0,
    DownlinkType Type = DownlinkType_StateUpdate) {
  auto GPSString__ = GPSString ? _fbb.CreateString(GPSString) : 0;
  return Calstar::CreateDownlinkMsg(
      _fbb,
      Bytes,
      State,
      FCPowered,
      FCMsg,
      GPSString__,
      BattVoltage,
      FrameID,
      AckReqd,
      TimeStamp,
      Type);
}

inline const Calstar::DownlinkMsg *GetDownlinkMsg(const void *buf) {
  return flatbuffers::GetRoot<Calstar::DownlinkMsg>(buf);
}

inline const Calstar::DownlinkMsg *GetSizePrefixedDownlinkMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Calstar::DownlinkMsg>(buf);
}

inline bool VerifyDownlinkMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calstar::DownlinkMsg>(nullptr);
}

inline bool VerifySizePrefixedDownlinkMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calstar::DownlinkMsg>(nullptr);
}

inline void FinishDownlinkMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::DownlinkMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDownlinkMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::DownlinkMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calstar

#endif  // FLATBUFFERS_GENERATED_MSGDOWNLINK_CALSTAR_H_
