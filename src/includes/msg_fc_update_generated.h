// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGFCUPDATE_CALSTAR_H_
#define FLATBUFFERS_GENERATED_MSGFCUPDATE_CALSTAR_H_

#include "flatbuffers/flatbuffers.h"

namespace Calstar {

struct FCUpdateMsg;

enum FCState {
  FCState_Pad = 0,
  FCState_Flight = 1,
  FCState_MIN = FCState_Pad,
  FCState_MAX = FCState_Flight
};

inline const FCState (&EnumValuesFCState())[2] {
  static const FCState values[] = {
    FCState_Pad,
    FCState_Flight
  };
  return values;
}

inline const char * const *EnumNamesFCState() {
  static const char * const names[] = {
    "Pad",
    "Flight",
    nullptr
  };
  return names;
}

inline const char *EnumNameFCState(FCState e) {
  if (e < FCState_Pad || e > FCState_Flight) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesFCState()[index];
}

struct FCUpdateMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BYTES = 4,
    VT_STATE = 6,
    VT_ACCELX = 8,
    VT_ACCELY = 10,
    VT_ACCELZ = 12,
    VT_MAGX = 14,
    VT_MAGY = 16,
    VT_MAGZ = 18,
    VT_GYROX = 20,
    VT_GYROY = 22,
    VT_GYROZ = 24,
    VT_ALTITUDE = 26,
    VT_PRESSURE = 28,
    VT_BP1CONTINUITY = 30,
    VT_BP1IGNITED = 32,
    VT_BP2CONTINUITY = 34,
    VT_BP2IGNITED = 36,
    VT_BP3CONTINUITY = 38,
    VT_BP3IGNITED = 40,
    VT_BP4CONTINUITY = 42,
    VT_BP4IGNITED = 44,
    VT_BP5CONTINUITY = 46,
    VT_BP5IGNITED = 48,
    VT_BP6CONTINUITY = 50,
    VT_BP6IGNITED = 52,
    VT_BP7CONTINUITY = 54,
    VT_BP7IGNITED = 56
  };
  uint8_t Bytes() const {
    return GetField<uint8_t>(VT_BYTES, 0);
  }
  FCState State() const {
    return static_cast<FCState>(GetField<int8_t>(VT_STATE, 0));
  }
  float AccelX() const {
    return GetField<float>(VT_ACCELX, 0.0f);
  }
  float AccelY() const {
    return GetField<float>(VT_ACCELY, 0.0f);
  }
  float AccelZ() const {
    return GetField<float>(VT_ACCELZ, 0.0f);
  }
  float MagX() const {
    return GetField<float>(VT_MAGX, 0.0f);
  }
  float MagY() const {
    return GetField<float>(VT_MAGY, 0.0f);
  }
  float MagZ() const {
    return GetField<float>(VT_MAGZ, 0.0f);
  }
  float GyroX() const {
    return GetField<float>(VT_GYROX, 0.0f);
  }
  float GyroY() const {
    return GetField<float>(VT_GYROY, 0.0f);
  }
  float GyroZ() const {
    return GetField<float>(VT_GYROZ, 0.0f);
  }
  float Altitude() const {
    return GetField<float>(VT_ALTITUDE, 0.0f);
  }
  float Pressure() const {
    return GetField<float>(VT_PRESSURE, 0.0f);
  }
  bool BP1Continuity() const {
    return GetField<uint8_t>(VT_BP1CONTINUITY, 0) != 0;
  }
  bool BP1Ignited() const {
    return GetField<uint8_t>(VT_BP1IGNITED, 0) != 0;
  }
  bool BP2Continuity() const {
    return GetField<uint8_t>(VT_BP2CONTINUITY, 0) != 0;
  }
  bool BP2Ignited() const {
    return GetField<uint8_t>(VT_BP2IGNITED, 0) != 0;
  }
  bool BP3Continuity() const {
    return GetField<uint8_t>(VT_BP3CONTINUITY, 0) != 0;
  }
  bool BP3Ignited() const {
    return GetField<uint8_t>(VT_BP3IGNITED, 0) != 0;
  }
  bool BP4Continuity() const {
    return GetField<uint8_t>(VT_BP4CONTINUITY, 0) != 0;
  }
  bool BP4Ignited() const {
    return GetField<uint8_t>(VT_BP4IGNITED, 0) != 0;
  }
  bool BP5Continuity() const {
    return GetField<uint8_t>(VT_BP5CONTINUITY, 0) != 0;
  }
  bool BP5Ignited() const {
    return GetField<uint8_t>(VT_BP5IGNITED, 0) != 0;
  }
  bool BP6Continuity() const {
    return GetField<uint8_t>(VT_BP6CONTINUITY, 0) != 0;
  }
  bool BP6Ignited() const {
    return GetField<uint8_t>(VT_BP6IGNITED, 0) != 0;
  }
  bool BP7Continuity() const {
    return GetField<uint8_t>(VT_BP7CONTINUITY, 0) != 0;
  }
  bool BP7Ignited() const {
    return GetField<uint8_t>(VT_BP7IGNITED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BYTES) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<float>(verifier, VT_ACCELX) &&
           VerifyField<float>(verifier, VT_ACCELY) &&
           VerifyField<float>(verifier, VT_ACCELZ) &&
           VerifyField<float>(verifier, VT_MAGX) &&
           VerifyField<float>(verifier, VT_MAGY) &&
           VerifyField<float>(verifier, VT_MAGZ) &&
           VerifyField<float>(verifier, VT_GYROX) &&
           VerifyField<float>(verifier, VT_GYROY) &&
           VerifyField<float>(verifier, VT_GYROZ) &&
           VerifyField<float>(verifier, VT_ALTITUDE) &&
           VerifyField<float>(verifier, VT_PRESSURE) &&
           VerifyField<uint8_t>(verifier, VT_BP1CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP1IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP2CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP2IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP3CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP3IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP4CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP4IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP5CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP5IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP6CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP6IGNITED) &&
           VerifyField<uint8_t>(verifier, VT_BP7CONTINUITY) &&
           VerifyField<uint8_t>(verifier, VT_BP7IGNITED) &&
           verifier.EndTable();
  }
};

struct FCUpdateMsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Bytes(uint8_t Bytes) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BYTES, Bytes, 0);
  }
  void add_State(FCState State) {
    fbb_.AddElement<int8_t>(FCUpdateMsg::VT_STATE, static_cast<int8_t>(State), 0);
  }
  void add_AccelX(float AccelX) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_ACCELX, AccelX, 0.0f);
  }
  void add_AccelY(float AccelY) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_ACCELY, AccelY, 0.0f);
  }
  void add_AccelZ(float AccelZ) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_ACCELZ, AccelZ, 0.0f);
  }
  void add_MagX(float MagX) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_MAGX, MagX, 0.0f);
  }
  void add_MagY(float MagY) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_MAGY, MagY, 0.0f);
  }
  void add_MagZ(float MagZ) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_MAGZ, MagZ, 0.0f);
  }
  void add_GyroX(float GyroX) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_GYROX, GyroX, 0.0f);
  }
  void add_GyroY(float GyroY) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_GYROY, GyroY, 0.0f);
  }
  void add_GyroZ(float GyroZ) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_GYROZ, GyroZ, 0.0f);
  }
  void add_Altitude(float Altitude) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_ALTITUDE, Altitude, 0.0f);
  }
  void add_Pressure(float Pressure) {
    fbb_.AddElement<float>(FCUpdateMsg::VT_PRESSURE, Pressure, 0.0f);
  }
  void add_BP1Continuity(bool BP1Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP1CONTINUITY, static_cast<uint8_t>(BP1Continuity), 0);
  }
  void add_BP1Ignited(bool BP1Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP1IGNITED, static_cast<uint8_t>(BP1Ignited), 0);
  }
  void add_BP2Continuity(bool BP2Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP2CONTINUITY, static_cast<uint8_t>(BP2Continuity), 0);
  }
  void add_BP2Ignited(bool BP2Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP2IGNITED, static_cast<uint8_t>(BP2Ignited), 0);
  }
  void add_BP3Continuity(bool BP3Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP3CONTINUITY, static_cast<uint8_t>(BP3Continuity), 0);
  }
  void add_BP3Ignited(bool BP3Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP3IGNITED, static_cast<uint8_t>(BP3Ignited), 0);
  }
  void add_BP4Continuity(bool BP4Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP4CONTINUITY, static_cast<uint8_t>(BP4Continuity), 0);
  }
  void add_BP4Ignited(bool BP4Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP4IGNITED, static_cast<uint8_t>(BP4Ignited), 0);
  }
  void add_BP5Continuity(bool BP5Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP5CONTINUITY, static_cast<uint8_t>(BP5Continuity), 0);
  }
  void add_BP5Ignited(bool BP5Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP5IGNITED, static_cast<uint8_t>(BP5Ignited), 0);
  }
  void add_BP6Continuity(bool BP6Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP6CONTINUITY, static_cast<uint8_t>(BP6Continuity), 0);
  }
  void add_BP6Ignited(bool BP6Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP6IGNITED, static_cast<uint8_t>(BP6Ignited), 0);
  }
  void add_BP7Continuity(bool BP7Continuity) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP7CONTINUITY, static_cast<uint8_t>(BP7Continuity), 0);
  }
  void add_BP7Ignited(bool BP7Ignited) {
    fbb_.AddElement<uint8_t>(FCUpdateMsg::VT_BP7IGNITED, static_cast<uint8_t>(BP7Ignited), 0);
  }
  explicit FCUpdateMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FCUpdateMsgBuilder &operator=(const FCUpdateMsgBuilder &);
  flatbuffers::Offset<FCUpdateMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FCUpdateMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<FCUpdateMsg> CreateFCUpdateMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t Bytes = 0,
    FCState State = FCState_Pad,
    float AccelX = 0.0f,
    float AccelY = 0.0f,
    float AccelZ = 0.0f,
    float MagX = 0.0f,
    float MagY = 0.0f,
    float MagZ = 0.0f,
    float GyroX = 0.0f,
    float GyroY = 0.0f,
    float GyroZ = 0.0f,
    float Altitude = 0.0f,
    float Pressure = 0.0f,
    bool BP1Continuity = false,
    bool BP1Ignited = false,
    bool BP2Continuity = false,
    bool BP2Ignited = false,
    bool BP3Continuity = false,
    bool BP3Ignited = false,
    bool BP4Continuity = false,
    bool BP4Ignited = false,
    bool BP5Continuity = false,
    bool BP5Ignited = false,
    bool BP6Continuity = false,
    bool BP6Ignited = false,
    bool BP7Continuity = false,
    bool BP7Ignited = false) {
  FCUpdateMsgBuilder builder_(_fbb);
  builder_.add_Pressure(Pressure);
  builder_.add_Altitude(Altitude);
  builder_.add_GyroZ(GyroZ);
  builder_.add_GyroY(GyroY);
  builder_.add_GyroX(GyroX);
  builder_.add_MagZ(MagZ);
  builder_.add_MagY(MagY);
  builder_.add_MagX(MagX);
  builder_.add_AccelZ(AccelZ);
  builder_.add_AccelY(AccelY);
  builder_.add_AccelX(AccelX);
  builder_.add_BP7Ignited(BP7Ignited);
  builder_.add_BP7Continuity(BP7Continuity);
  builder_.add_BP6Ignited(BP6Ignited);
  builder_.add_BP6Continuity(BP6Continuity);
  builder_.add_BP5Ignited(BP5Ignited);
  builder_.add_BP5Continuity(BP5Continuity);
  builder_.add_BP4Ignited(BP4Ignited);
  builder_.add_BP4Continuity(BP4Continuity);
  builder_.add_BP3Ignited(BP3Ignited);
  builder_.add_BP3Continuity(BP3Continuity);
  builder_.add_BP2Ignited(BP2Ignited);
  builder_.add_BP2Continuity(BP2Continuity);
  builder_.add_BP1Ignited(BP1Ignited);
  builder_.add_BP1Continuity(BP1Continuity);
  builder_.add_State(State);
  builder_.add_Bytes(Bytes);
  return builder_.Finish();
}

inline const Calstar::FCUpdateMsg *GetFCUpdateMsg(const void *buf) {
  return flatbuffers::GetRoot<Calstar::FCUpdateMsg>(buf);
}

inline const Calstar::FCUpdateMsg *GetSizePrefixedFCUpdateMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Calstar::FCUpdateMsg>(buf);
}

inline bool VerifyFCUpdateMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calstar::FCUpdateMsg>(nullptr);
}

inline bool VerifySizePrefixedFCUpdateMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calstar::FCUpdateMsg>(nullptr);
}

inline void FinishFCUpdateMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::FCUpdateMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFCUpdateMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Calstar::FCUpdateMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calstar

#endif  // FLATBUFFERS_GENERATED_MSGFCUPDATE_CALSTAR_H_
